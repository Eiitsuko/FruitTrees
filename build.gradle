buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://maven.parchmentmc.org' }
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${version_major}.${version_minor}.${version_patch}"
group = "snownee.fruits"
archivesBaseName = "FruitTrees-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

if (System.getenv().BUILD_NUMBER != null) {
    // Maven version scheme uses dot to separate things
    version += ".${System.getenv().BUILD_NUMBER}"
}

minecraft {
    mappings channel: 'parchment', version: '2021.08.22-1.17.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'
            
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'
            
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveName = "${archivesBaseName}-${version}-deobf.${extension}"
}

artifacts {
    archives deobfJar
}

repositories {
    maven {
        name = "jei"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven { url='https://repo.spongepowered.org/repository/maven-public/' }
    maven {
        url = "https://www.cursemaven.com"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-1.17.1:8.0.0.14:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.17.1:8.0.0.14")

	annotationProcessor "org.spongepowered:mixin:0.8.3:processor"

    implementation fg.deobf("curse.maven:kiwi-303657:3441778")

    implementation fg.deobf("curse.maven:jade-324717:3439658")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    exclude "**/*.bat"
    manifest {
        attributes([
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "fruittrees.mixins.json"
        ])
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "mixins.fruittrees.refmap.json"
}

processResources {
    from ('src/main/java') {
        include '**/*.json'
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

